public class MainActivity extends AppCompatActivity {

    private final int REQUEST_PREMISSION_CAMERA = 100;

    private boolean mbFaceDetAvailable;
    private int miMaxFaceCount = 0;
    private int miFaceDetMode;

    private TextureView mTextureview = null;

    private Size mPreviewSize = null;
    private CameraDevice mCameraDevice = null;
    private CaptureRequest.Builder mPreviewBuilder = null;
    private CameraCaptureSession mCameraPreviewCaptureSession = null;

    // 當UI的TextureView建立時，會執行onSurfaceTextureAvailable()
    private TextureView.SurfaceTextureListener mSurfaceTextureListener = new TextureView.SurfaceTextureListener() {
        @Override
        public void onSurfaceTextureAvailable(@NonNull SurfaceTexture surface, int width, int height) {
            //檢查是否取得camera權限
            if (askForPermissions())
                openCamera();   //當TextureView的SurfaceTexture準備好的時候檢查Camera的使用權限，然後啟動Camera
        }

        @Override
        public void onSurfaceTextureSizeChanged(@NonNull SurfaceTexture surface, int width, int height) {

        }

        @Override
        public boolean onSurfaceTextureDestroyed(@NonNull SurfaceTexture surface) {
            return false;
        }

        @Override
        public void onSurfaceTextureUpdated(@NonNull SurfaceTexture surface) {

        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        mTextureview = findViewById(R.id.textureView);
        mTextureview.setSurfaceTextureListener(mSurfaceTextureListener);    // 取得TextureView元件並且設定SurfaceTextureListener
    }

    @Override
    protected void onResume(){
        super.onResume();

        // 如果TextureView已經可以使用，就檢查Camera的使用權限
        // 然後開啟Camera
        if (mTextureview.isAvailable()){
            if (askForPermissions())
                openCamera();
        }
    }

    @Override
    protected void onStop(){
        super.onStop();

        // 釋放Camera的控制權
        if (mCameraDevice != null){
            mCameraDevice.close();
            mCameraDevice = null;
        }
    }

    // 這個函式取得Camera的使用權
    private boolean askForPermissions(){
        // App需要用的功能權限清單
        String[] permissions = new String[]{
                Manifest.permission.CAMERA
        };

        // 檢查是否已取得權限
        final List<String> listPermissionNeeded = new ArrayList<>();
        boolean bShowPermissionRationale = false;
        for (String p: permissions){
            int result = ContextCompat.checkSelfPermission(MainActivity.this, p);
            if (result != PackageManager.PERMISSION_GRANTED){
                listPermissionNeeded.add(p);

                // 檢查是否需要顯示說明
                if (ActivityCompat.shouldShowRequestPermissionRationale(MainActivity.this, p))
                    bShowPermissionRationale = true;
            }
        }

        // 向使用者徵詢還沒有許可的權限
        if (!listPermissionNeeded.isEmpty()){
            if (bShowPermissionRationale){
                AlertDialog.Builder altDlBuilder = new AlertDialog.Builder(MainActivity.this);
                altDlBuilder.setTitle("提示");
                altDlBuilder.setMessage("App需要您的許可才能執行。");
                altDlBuilder.setIcon(android.R.drawable.ic_dialog_info);
                altDlBuilder.setCancelable(false);
                altDlBuilder.setPositiveButton("確定", new DialogInterface.OnClickListener() {
                    @Override
                    public void onClick(DialogInterface dialog, int i) {
                        ActivityCompat.requestPermissions(MainActivity.this, listPermissionNeeded.toArray(new String[listPermissionNeeded.size()]), REQUEST_PREMISSION_CAMERA);
                    }
                });
                altDlBuilder.show();
            }
            else ActivityCompat.requestPermissions(MainActivity.this, listPermissionNeeded.toArray(new String[listPermissionNeeded.size()]), REQUEST_PREMISSION_CAMERA);

            return false;
        }

        return true;
    }

    // 這個函式用來開啟Camera
    private void openCamera(){
        // 取得CameraManager
        CameraManager camMgr = (CameraManager) getSystemService(CAMERA_SERVICE);

        try{
            // 取得相機背後的camera
            String cameraId = camMgr.getCameraIdList()[0];
            CameraCharacteristics camChar = camMgr.getCameraCharacteristics(cameraId);

            // 取得解析度
            StreamConfigurationMap map = camChar.get(CameraCharacteristics.SCALER_STREAM_CONFIGURATION_MAP);
            mPreviewSize = map.getOutputSizes(SurfaceTexture.class)[0];

            // 檢查是否有人臉偵測功能
            int[] iFaceDetModes = camChar.get(CameraCharacteristics.STATISTICS_INFO_AVAILABLE_FACE_DETECT_MODES);
            if (iFaceDetModes == null){
                mbFaceDetAvailable = false;
                Toast.makeText(MainActivity.this, "不支援人臉偵測", Toast.LENGTH_LONG).show();
            }
            else{
                mbFaceDetAvailable = false;
                for (int mode : iFaceDetModes){
                    if (mode == CameraMetadata.STATISTICS_FACE_DETECT_MODE_SIMPLE){
                        mbFaceDetAvailable = true;
                        miFaceDetMode = CameraMetadata.STATISTICS_FACE_DETECT_MODE_SIMPLE;
                        break;  // Find the desired mode, so stop searching
                    }
                    else if (mode == CameraMetadata.STATISTICS_FACE_DETECT_MODE_FULL){
                        // this is a candidate mode, keep searching
                        mbFaceDetAvailable = true;
                        miFaceDetMode = CameraMetadata.STATISTICS_FACE_DETECT_MODE_FULL;
                    }
                }
            }

            if (mbFaceDetAvailable){
                miMaxFaceCount = camChar.get(CameraCharacteristics.STATISTICS_INFO_MAX_FACE_COUNT);
                Toast.makeText(MainActivity.this, "人臉偵測功能： " + String.valueOf(miFaceDetMode) + "\n人臉數最大值： " + String.valueOf(miMaxFaceCount), Toast.LENGTH_LONG).show();
            }

            // 啟動camera
            if (ContextCompat.checkSelfPermission(MainActivity.this, Manifest.permission.CAMERA) == PackageManager.PERMISSION_GRANTED)
                camMgr.openCamera(cameraId, mCameraStateCallback, null);
        }
        catch(CameraAccessException e){
            e.printStackTrace();
        }
    }

    private CameraDevice.StateCallback mCameraStateCallback = new CameraDevice.StateCallback() {
        @Override
        public void onOpened(@NonNull CameraDevice camera) {
            mCameraDevice = camera;
            startPreview(); // camera開啟成功時，記下camera裝置，然後啟動預覽功能
        }

        @Override
        public void onDisconnected(@NonNull CameraDevice camera) {
            Toast.makeText(MainActivity.this, "無法使用camera", Toast.LENGTH_LONG).show();
        }

        @Override
        public void onError(@NonNull CameraDevice camera, int i) {
            Toast.makeText(MainActivity.this, "camera開啟錯誤", Toast.LENGTH_LONG).show();
        }
    };

    // Camera的CaptureSession狀態改變時執行
    private CameraCaptureSession.StateCallback mCameraCaptureSessionCallback = new CameraCaptureSession.StateCallback() {
        @Override
        public void onConfigured(@NonNull CameraCaptureSession session) {
            closeAllCameraCaptureSession();

            // 記下這個capture session，使用完畢要刪除
            mCameraPreviewCaptureSession = session;

            mPreviewBuilder.set(CaptureRequest.CONTROL_MODE, CameraMetadata.CONTROL_MODE_AUTO);
            mPreviewBuilder.set(CaptureRequest.STATISTICS_FACE_DETECT_MODE, miFaceDetMode);

            HandlerThread backgroundThread = new HandlerThread("CameraPreview");
            backgroundThread.start();
            Handler backgorundHandler = new Handler(backgroundThread.getLooper());

            try{
                mCameraPreviewCaptureSession.setRepeatingRequest(mPreviewBuilder.build(), null, backgorundHandler);
            }
            catch (CameraAccessException e){
                e.printStackTrace();
            }
        }

        @Override
        public void onConfigureFailed(@NonNull CameraCaptureSession session) {
            Toast.makeText(MainActivity.this, "Camera預覽錯誤", Toast.LENGTH_LONG).show();
        }
    };

    // 這個函式用來啟動camera的預覽功能
    private void startPreview(){
        // 從TextureView取得SurfaceTexture
        SurfaceTexture surfaceTexture = mTextureview.getSurfaceTexture();

        surfaceTexture.setDefaultBufferSize(mPreviewSize.getWidth(), mPreviewSize.getHeight());

        // 依照TextureView的解析度建立一個surface給camera使用
        Surface surface = new Surface(surfaceTexture);

        // 設定camera的CaptureRequest和CaptureSession
        try{
            mPreviewBuilder = mCameraDevice.createCaptureRequest(CameraDevice.TEMPLATE_PREVIEW);
        }
        catch (CameraAccessException e){
            e.printStackTrace();
        }

        mPreviewBuilder.addTarget(surface);

        try{
            mCameraDevice.createCaptureSession(Arrays.asList(surface), mCameraCaptureSessionCallback, null);
        }
        catch (CameraAccessException e){
            e.printStackTrace();
        }
    }

    // 建立新的Camera Capture Session之前
    // 呼叫這個函式，清除舊的Camera Capture Session
    private void closeAllCameraCaptureSession(){
        if (mCameraPreviewCaptureSession != null){
            mCameraPreviewCaptureSession.close();
            mCameraPreviewCaptureSession = null;
        }
    }
}
